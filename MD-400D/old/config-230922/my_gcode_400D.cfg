# macro gcode
#--------------------------------------------------------------------------------
[gcode_macro TEST_GCODE]
gcode:
  # {% set p0=printer.gcode_move.position.z %}
  # {% set p1=printer.gcode_move.gcode_position.z %}
  # M118 position:{p0}, gcode_position:{p1}
  # SAVE_VARIABLE VARIABLE=hello VALUE='"Helloworld"'
  # {% for obj in printer %}
  #   # RESPOND TYPE=echo MSG={obj}
  #   M118 {obj}
  #   {% for obj1 in printer.obj %}
  #     M118 {obj1}
  #   {% endfor %}
  # {% endfor %}
  # {% set position_min=[printer.toolhead.axis_minimum.x, printer.toolhead.axis_minimum.y, printer.toolhead.axis_minimum.z] %}
  # {% set position_max=[printer.toolhead.axis_maximum.x, printer.toolhead.axis_maximum.y, printer.toolhead.axis_maximum.z] %}
  # M118 {position_min}
  # M118 {position_max}
  M118 d0={printer.dual_carriage.carriage_0}, d1={printer.dual_carriage.carriage_1}
  M118 {printer.extruder.motion_queue}>>{printer.extruder1.motion_queue} activate={printer.toolhead.extruder}
  M118 {printer.probe.last_z_result}
  # M118 绝对坐标:{printer.gcode_move.absolute_coordinates}

[gcode_macro _POWEROFF]
gcode:{action_call_remote_method("shutdown_machine")}
[gcode_macro _REBOOT]
gcode:{action_call_remote_method("reboot_machine")}

[gcode_macro SET_ALL_EXTRUDER]
gcode:
  {% set e_name=['extruder', 'extruder1', 'extruder2', 'extruder3'] %}
  {% set count=namespace(t0=0) %}
  {% for obj in printer %}
    {% if obj[0]=='e' and obj[2]=='t' and obj[4]=='u' %}
      {% set count.t0=count.t0+1 %}
    {% endif %}
  {% endfor %}
  {% for n in range(0, count.t0, 1) %}
    SET_HEATER_TEMPERATURE HEATER={e_name[n]} TARGET={params.TEMP}
  {% endfor %}

[gcode_macro SAVE_PLR_FILE]
gcode:
  # 可能存在多种定义的
  {% set e_name=['extruder', 'extruder1', 'extruder2', 'extruder3'] %}
  {% set count=namespace(t0=0, f0=0, f_name="") %}
  {% for obj in printer %}
    {% if obj[0]=='e' %}
      {% if obj[2]=='t' and obj[4]=='u' %} # extruder
        SAVE_VARIABLE VARIABLE={e_name[count.t0]} VALUE={printer[e_name[count.t0]].target}
        {% set count.t0=count.t0+1 %}
      {% endif %}
    {% elif obj[0]=='f' %}
      {% if obj[2]=='n' and obj[4]=='g' %} # fan_generic
        {% set count.f0=0 %}
        {% set count.f_name="" %}
        {% for p in obj %}
          {% if count.f0>=1 %}
            {% set count.f_name=count.f_name~p %}
            {% set count.f0=count.f0+1 %}
          {% endif %}
          {% if p==' ' %}
            {% set count.f0=count.f0+1 %}
          {% endif %}
        {% endfor %}
        SAVE_VARIABLE VARIABLE=g_{count.f_name} VALUE={printer[obj].speed}
      {% else %} # fan
        SAVE_VARIABLE VARIABLE={obj} VALUE={printer[obj].speed}
      {% endif %}
    {% elif obj[0]=='h' %}
      {% if obj[2]=='a' and obj[4]=='e' %}
        {% if obj[7]=='b'%} # heater_bed
          SAVE_VARIABLE VARIABLE={obj} VALUE={printer[obj].temperature}
        # {% elif obj[7]=='g'} # heater_generic ***
        {% endif %} # heater_bed
      {% endif %} # heater_bed
    {% elif obj[0]=='v' %}
      {% if obj[2]=='r' and obj[4]=='u' %} # virtual_sdcard
        SAVE_VARIABLE VARIABLE=file_path VALUE='"{printer[obj].file_path}"'
        SAVE_VARIABLE VARIABLE=file_size VALUE={printer[obj].file_size}
        SAVE_VARIABLE VARIABLE=file_position VALUE={printer[obj].file_position}
      {% endif %}
    {% endif %}
  {% endfor %}
  # 
  {% if count.t0>1 %}
    SAVE_VARIABLE VARIABLE=e_count VALUE={count.t0}
    SAVE_VARIABLE VARIABLE=active_head VALUE='"{printer.toolhead.extruder}"'
  {% endif %}
  # save_position
  {% set position_x=printer.gcode_move.gcode_position.x %}
  {% set position_y=printer.gcode_move.gcode_position.y %}
  {% set position_z=printer.gcode_move.gcode_position.z %}
  {% set position_e=printer.gcode_move.gcode_position.e %}
  SAVE_VARIABLE VARIABLE=position_x VALUE={position_x} VARIABLE=position_y VALUE={position_y} VARIABLE=position_z VALUE={position_z} VARIABLE=position_e VALUE={position_e}
  SAVE_VARIABLE VARIABLE=file_name VALUE='"{printer[print_stats].filename}"'

[gcode_macro REMOVE_PLR]
gcode:
  SAVE_VARIABLE VARIABLE=need_resume VALUE=0
  
[gcode_macro SAVE_PLR]
gcode:
  SAVE_VARIABLE VARIABLE=need_resume VALUE=1
  SAVE_PLR_FILE

# [gcode_button POWER_LOSS]
# pin: !PC6
# press_gcode:
#   SAVE_PLR

# 使能打完关机
[gcode_macro AUTO_SHUTDOWN]
variable_auto_shutdown: 0
gcode:
  SET_GCODE_VARIABLE MACRO=AUTO_SHUTDOWN VARIABLE=auto_shutdown VALUE=1
  # {action_respond_info("AUTO_SHUTDOWN ON!")}
  M118 "AUTO_SHUTDOWN ON!"
  SAVE_VARIABLE VARIABLE=auto_shutdown VALUE=1
  # 需要使用打完关机时只需点击Klipper首页的 "DWGJ_ON"按钮即开启打完关机
# 失能打完关机
[gcode_macro AUTO_SHUTDOWN_OFF]
gcode:
  SET_GCODE_VARIABLE MACRO=AUTO_SHUTDOWN VARIABLE=auto_shutdown VALUE=0
  # {action_respond_info("AUTO_SHUTDOWN OFF!")}
  M118 "AUTO_SHUTDOWN OFF!"
  SAVE_VARIABLE VARIABLE=auto_shutdown VALUE=0
  # 不需要使用打完关机时只需点击Klipper首页的 "DWGJ_OFF"按钮即关闭打完关机
# M81指令触发的同时打完关机变量使能才会执行关机
[gcode_macro M81]
gcode:
  {% set is_shutdown = printer["gcode_macro AUTO_SHUTDOWN"].auto_shutdown|int %}
  {% if is_shutdown == 1 %}
    SHUT_DOWN
  {% else %}
    M118 若为触发则暂时什么都不做
  {% endif %}

# 设置 SHUT_DOWN 为关机宏
[gcode_macro SHUT_DOWN]
gcode:
  # SET_GCODE_VARIABLE MACRO=AUTO_SHUTDOWN VARIABLE=auto_shutdown VALUE=0 #失能打完关机
  {action_emergency_stop("Ready to shut down!!!")}         #执行软件层面关机
  # UPDATE_DELAYED_GCODE ID=Delayed_SHUT_DOWN DURATION=3      #执行切断电源

# 打完关机模块引脚
#[output_pin killbutton]
#pin:PE4            # 打完关机引脚，必须填写
#value: 1            # 默认值
##shutdown_value: 0  # 关机值

# 设置延迟关机宏
#[delayed_gcode Delayed_SHUT_DOWN]  
#gcode:
#    set_pin pin=killbutton value=0.0        # 延迟关机
##--------------------------------------------------------------------------------
#[delayed_gcode powerOFF]           # 设置延迟执行M81宏
#gcode:
#    M81 value=0.0                           # 延迟执行M81

# Multi extruder settings
# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro PARK_extruder]
gcode:
  SAVE_GCODE_STATE NAME=park0
  G90
  G1 F6000 X-60
  RESTORE_GCODE_STATE NAME=park0
[gcode_macro PARK_extruder1]
gcode:
  SAVE_GCODE_STATE NAME=park1
  G90
  G1 F6000 X{printer.toolhead.axis_maximum.x+60}
  RESTORE_GCODE_STATE NAME=park1

# Activate the primary extruder
[gcode_macro T0]
gcode:
  {% if printer.dual_carriage.carriage_1=="COPY" or printer.dual_carriage_carriage_1=="MIRROR" %}
    # 接触电机绑定, 只要MOTION_QUEUE的字符为空就行.
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=""
  {% endif %}
  {% if params.R is defined %}
  {% elif printer.toolhead.extruder=='extruder1' %}
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    {% if "xyz" in printer.toolhead.homed_axes %} PARK_extruder1 {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    {% if "xyz" in printer.toolhead.homed_axes %} PARK_extruder {% endif %}
    SET_GCODE_OFFSET X=0 Y=0 Z=0
  {% else %}
    M118 The current toolheade is T0
    # ACTIVATE_EXTRUDER EXTRUDER=extruder
    # SET_DUAL_CARRIAGE CARRIAGE=0
    # SET_GCODE_OFFSET X=0 Y=0 Z=0
  {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    SET_GCODE_OFFSET X=0 Y=0 Z=0

[gcode_macro T1]
gcode:
  {% set T1_offset_x=1.1 %}
  {% set T1_offset_y=0.2 %}
  {% set T1_offset_z=0.0 %}
  {% if printer.dual_carriage.carriage_1=="COPY" or printer.dual_carriage_carriage_1=="MIRROR" %}
    # 接触电机绑定, 只要MOTION_QUEUE的字符为空就行.
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=""
  {% endif %}
  {% if params.R is defined %}
  {% elif printer.toolhead.extruder=="extruder" %}
    SET_DUAL_CARRIAGE CARRIAGE=0
    {% if "xyz" in printer.toolhead.homed_axes %} PARK_extruder {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    {% if "xyz" in printer.toolhead.homed_axes %} PARK_extruder1 {% endif %}
    SET_GCODE_OFFSET X={T1_offset_x} Y={T1_offset_y} Z={T1_offset_z}
  {% else %}
    M118 The current toolheade is T1
  {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    SET_GCODE_OFFSET X={T1_offset_x} Y={T1_offset_y} Z={T1_offset_z}

# A helper script to activate copy mode
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
  SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
  G1 F6000 X0
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
  G1 F6000 X{printer.toolhead.axis_maximum.x/2}
  SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
  SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
  G1 F6000 X0
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
  G1 F6000 X{printer.toolhead.axis_maximum.x}
  SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

# A helper script to activate primary mode
[gcode_macro ACTIVATE_PRIMARY_MODE]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=''
  SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
  SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  G28 X

[gcode_macro M605]
gcode:
  {% if params.S is defined %}
    {% if params.S=='1' %}
      ACTIVATE_PRIMARY_MODE
    {% elif params.S=='2' %}
      ACTIVATE_COPY_MODE
    {% elif params.S=='3' %}
      ACTIVATE_MIRROR_MODE
    {% endif %}
  {% endif %}
  M118 M605: {printer.dual_carriage.carriage_1} Mode

#[gcode_macro GOTO_ZERO]
#gcode: G1 X0 Y0 Z1 F6000


# delayed gcode 开机后延时一定时间执行的gcode
#--------------------------------------------------------------------------------
[delayed_gcode Init_Shaper]
initial_duration: 0.6
gcode:
  SET_DUAL_CARRIAGE CARRIAGE=1
  SET_INPUT_SHAPER SHAPER_TYPE_X=mzv SHAPER_FREQ_X=40.4 SHAPER_TYPE_Y=mzv SHAPER_FREQ_Y=32.8
  SET_DUAL_CARRIAGE CARRIAGE=0
  SET_INPUT_SHAPER SHAPER_TYPE_X=mzv SHAPER_FREQ_X=40.0 SHAPER_TYPE_Y=mzv SHAPER_FREQ_Y=32.8

[delayed_gcode Set_Auto_Shutdown]
initial_duration: 0.8
gcode:
  {% if printer.save_variables.variables.auto_shutdown %} AUTO_SHUTDOWN {% endif %}

[delayed_gcode Load_Bed_Mash]
initial_duration: 1.0
gcode: BED_MESH_PROFILE LOAD="default"


# homing override
#--------------------------------------------------------------------------------
[homing_override]
# axes: z
#set_position_z: 6
gcode:
  {% set ho_max       = printer.toolhead.axis_maximum %}
  {% set ho_home      = printer.toolhead.homed_axes %}
  {% set ho_act_e     = printer.toolhead.extruder %}
  {% set ho_xy_feed   = 130*60 %}
  {% set ho_z_feed    = 10*60 %}
  {% set ho_wait_time = 1000 %} # 1000ms
  {% if printer.dual_carriage is defined %}
	{% set carriage_mode=printer.dual_carriage.carriage_1 %}
  {% endif %}
  {% if ho_act_e=="extruder1" %}
    T0 R0
  {% endif %}
  {% if not 'z' in ho_home %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE=10 VELOCITY=10 ACCEL=100
  {% elif printer.gcode_move.gcode_position.z<5 %}
    G1 Z5 F300
  {% endif %}
  {% if params.X is defined and params.Y is defined %}
    #SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    #G4 P{ho_wait_time}
    G28 X Y
  {% elif params.X is defined %}
    #SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    #G4 P{ho_wait_time}
    G28 X
  {% elif params.Y is defined %}
    #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    #G4 P{ho_wait_time}
    G28 Y
  {% else %}
    {% if printer.bed_mesh is defined %}
      {% set ho_bed_mesh=printer.bed_mesh.profile_name %}
      BED_MESH_CLEAR
    {% endif %}
    #MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=-20 SPEED=25 ACCEL=350 STOP_ON_ENDSTOP=1
    #MANUAL_STEPPER STEPPER=switch_stepper SET_POSITION=0
    #MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=2 SPEED=25 ACCEL=350
    # 查找字符'x'和'y'是否存在于ho_home字符串内, 不存在则先复位XY轴, 如果没有Z字符说明是G28, 全复位
    {% if not params.Z is defined or not 'x' in ho_home or not 'y' in ho_home %}
      #SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
      #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
      #SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
      #G4 P{ho_wait_time}
      G28 X Y
    {% endif %}
    {% if printer.bed_mesh is defined and ho_bed_mesh|length %}
      G1 F{ho_xy_feed} X{ho_max.x/2} Y{ho_max.y/2}
      BED_MESH_PROFILE LOAD={ho_bed_mesh}
    {% else %}
      G1 F{ho_xy_feed} X{ho_max.x/2} Y{ho_max.y/2}
    {% endif %}
    G28 Z
    G1 F{ho_z_feed} Z10
  {% endif %}
  {% if printer.dual_carriage is defined %}
	{% if carriage_mode=="COPY" or carriage_mode=="MIRROR" %}
      ACTIVATE_{carriage_mode}_MODE
	{% endif %}
  {% endif %}
  # 判定当前活跃的挤出机
  {% if ho_act_e=="extruder1" %}
    T1
  {% endif %}
