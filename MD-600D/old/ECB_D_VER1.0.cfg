########################################
# MCU configuration
########################################
[mcu ECB_D]
serial: /dev/serial/by-id/usb-Klipper_stm32f072xb_280029000E51324757373520-if00
restart_method: command


########################################
# Strpper & Heat configuration
########################################
[extruder]
dir_pin: ECB_D:PC0
step_pin: ECB_D:PC1
enable_pin: !ECB_D:PC3
microsteps: 16
rotation_distance: 8
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_cross_section: 2.5  # 最大的线条横截面积,不设置就是4.0*喷嘴孔径^2
max_extrude_only_distance: 600  # 单次最大挤出长度
heater_pin: ECB_D:PB4
sensor_type: PT1000
sensor_pin: ECB_D:PC4
control: pid  # 温度调控:PID
# 自动调控PID值: 发送命令"PID_CALIBRATE HEATER=extruder TARGET=220" 
# pid_Kp=18.134 pid_Ki=0.889 pid_Kd=92.484; 
# pid_Kp=13.737 pid_Ki=0.668 pid_Kd=70.570
# pid_Kp=12.235 pid_Ki=0.523 pid_Kd=71.573
pid_Kp: 18.737
pid_Ki: 0.889
pid_Kd: 92.484
min_temp: -150
max_temp: 320
[tmc2208 extruder]
uart_pin: ECB_D:PC2
run_current: 0.500
sense_resistor: 0.100
# stealthchop_threshold: 0.2

[extruder1]
dir_pin: !ECB_D:PB0
step_pin: ECB_D:PB1
enable_pin: !ECB_D:PB10
microsteps: 16
rotation_distance: 8
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_cross_section: 2.5  # 最大的线条横截面积,不设置就是4.0*喷嘴孔径^2
max_extrude_only_distance: 600  # 单次最大挤出长度
heater_pin: ECB_D:PB3
sensor_type: PT1000
sensor_pin: ECB_D:PC5
control: pid  # 温度调控:PID
# 自动调控PID值: 发送命令"PID_CALIBRATE HEATER=extruder TARGET=220" 
# pid_Kp=18.134 pid_Ki=0.889 pid_Kd=92.484; 
# pid_Kp=13.737 pid_Ki=0.668 pid_Kd=70.570
# pid_Kp=12.235 pid_Ki=0.523 pid_Kd=71.573
pid_Kp: 18.737
pid_Ki: 0.889
pid_Kd: 92.484
min_temp: -150
max_temp: 320
[tmc2208 extruder1]
uart_pin: ECB_D:PB2
run_current: 0.500
sense_resistor: 0.100
# stealthchop_threshold: 0.2

[manual_stepper switch_stepper]
step_pin: ECB_D:PA2
dir_pin: ECB_D:PA1
enable_pin: !ECB_D:PC15
microsteps: 16
rotation_distance: 4
velocity: 20
accel: 100
endstop_pin: !ECB_D:PC6
[tmc2208 manual_stepper switch_stepper]
uart_pin:ECB_D:PA3
run_current: 0.500
sense_resistor: 0.100
stealthchop_threshold: 999999
########################################
# switch nozzle Gcode
########################################
[gcode_macro T0]
gcode:
  # {% if printer['extruder1'].temperature > 170 %}
  #   G92 E0
  #   G1 E-15
  #   G92 E0
  # {% endif %}
  # MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=1 SPEED=25 ACCEL=350    # Lift secondary extruder SET_POSITION=0
  # SET_GCODE_OFFSET Z=0 MOVE=1 MOVE_SPEED=10                # Adjust z-height
  # SET_GCODE_OFFSET X=0 MOVE=1 MOVE_SPEED=150                       # Clear X offset
  # ACTIVATE_EXTRUDER EXTRUDER=extruder
  # {% if printer['extruder'].temperature > 170 %}
  #   G1 E15
  #   G92 E0
  # {% endif %}
  {% set T0_xy_feed   = 150*60 %}
  {% set T0_z_feed    = 10*60 %}
  {% set T0_pos       = printer.toolhead.position %}
  {% set T0_z_offset  = 1.3 %}
  {% if printer['extruder1'].temperature > 170 %}
    G92 E0
    G1 E-15
    G92 E0
  {% endif %}
  G1 Z{T0_pos.z+5} F{T0_z_feed}
  MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=2 SPEED=25 ACCEL=350    # Lift secondary extruder SET_POSITION=0
  SET_GCODE_OFFSET Z=0 X=0                # Adjust z-height
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  {% if printer['extruder'].temperature > 170 %}
    G1 E15
    G92 E0
  {% endif %}
  G1 Z{T0_pos.z-T0_z_offset} F{T0_z_feed}
  
[gcode_macro T1]
gcode:
  # {% if printer['extruder'].temperature > 170 %}
  #   G92 E0
  #   G1 E-15
  #   G92 E0
  # {% endif %}
  # SET_GCODE_OFFSET Z=1.70 MOVE=1 MOVE_SPEED=10             # Adjust z-height
  # MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=10 SPEED=25 ACCEL=350    # Position second extruder
  # SET_GCODE_OFFSET X=-62 MOVE=1 MOVE_SPEED=150                       # Account for different X offset
  # ACTIVATE_EXTRUDER EXTRUDER=extruder1
  # {% if printer['extruder1'].temperature > 170 %}
  #   G1 E15
  #   G92 E0
  # {% endif %}
  {% set T1_xy_feed   = 150*60 %}
  {% set T1_z_feed    = 10*60 %}
  {% set T1_pos       = printer.toolhead.position %}
  {% set T1_z_offset  = 1.3 %}
  {% if printer['extruder'].temperature > 170 %}
    G92 E0
    G1 E-15
    G92 E0
  {% endif %}
  G1 Z{T1_pos.z+5} F{T1_z_feed}
  MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=10 SPEED=25 ACCEL=350    # Position second extruder
  SET_GCODE_OFFSET X=-62 Z={T1_z_offset}              # Adjust z-height
  ACTIVATE_EXTRUDER EXTRUDER=extruder1
  {% if printer['extruder1'].temperature > 170 %}
    G1 E15
    G92 E0
  {% endif %}
  G1 Z{T1_pos.z} F{T1_z_feed}
########################################
# home & probe & 3Dtouch
########################################
[bltouch]                               # enable for BLTouch
sensor_pin: ^ECB_D:PB6
control_pin: ECB_D:PB7
x_offset: 0
y_offset: 28
# z_offset: 0
speed: 3.0
lift_speed: 10
# pin_move_time: 1
# pin_up_reports_not_triggered: False
# pin_up_touch_mode_reports_triggered: False
# probe_with_touch_mode: True
# set_output_mode: OD

# [safe_z_home]
# home_xy_position: 0, 0
# #   一个X，Y坐标（例如100，100），在这个坐标上应该进行Z归位。
# #   必须提供此参数
# #speed: 50.0
# #   工具头移动到安全Z原点的速度。
# #   默认为50毫米/秒
# z_hop: 5
# #   在归位前抬升Z轴的距离（mm）。这将用于任何归位命令，即使它没有将Z轴归位。
# #   如果Z轴已经归位，并且当前的Z轴位置小于z_hop，那么这条命令将把打印头提升到z_hop的高度。如果
# #   Z轴尚未归位，则打印头将被提升z_hop的高度。
# #   默认不执行Z抬升。
# #z_hop_speed: 15.0
# #   在归位之前，Z轴抬升的速度（单位：mm/s）。
# #   默认为15mm/s。
# #move_to_previous: False
# #   当设置为 "True "时，X轴和Y轴在Z轴归位后会重置到之前的位置。
# #   默认为false。

[bed_mesh]                              # enable for BLTouch
speed: 100
horizontal_move_z: 5                    # The Z coordinate the probe rises to prior to traveling between points.Default Value: 5
mesh_min: 30, 30                        # The first probed coordinate, nearest to the origin. This coordinate is relative to the probe's location.
mesh_max: 380, 380                      # The probed coordinate farthest farthest from the origin. 
                                        # This is not necessarily the last point probed, as the probing process occurs in a zig-zag fashion. 
                                        # As with mesh_min, this coordiante is relative to the probe's location.
probe_count: 7, 7
algorithm: bicubic                      # The algorithm used to interpolate the mesh. 
                                        # May belagrangeorbicubic.Lagrange interpolation is capped at 6 probed points as oscillation tends tooccur with a larger number of samples. 
                                        # Bicubic interpolation requires aminimum of 4 probed points along each axis, if less than 4 points arespecified then lagrange sampling is forced. 
                                        # Ifmesh_ppsis set to 0 thenthis value is ignored as no mesh interpolation is done.


########################################
# input_shaper
########################################
[adxl345 hotend_0]
cs_pin: ECB_D:PA4
#spi_speed: 5000000
#spi_bus:
spi_software_sclk_pin: ECB_D:PA5
spi_software_mosi_pin: ECB_D:PA7
spi_software_miso_pin: ECB_D:PA6
axes_map: y, z, x
#rate: 3200


########################################
# Fan configuration
########################################
#FAN0
[heater_fan Hotend_Fan0]
pin: !ECB_D:PC12
tachometer_pin: ^ECB_D:PC11
shutdown_speed: 0
heater: extruder
heater_temp: 50.0
#FAN2
[heater_fan Hotend_Fan1]
pin: !ECB_D:PC9
tachometer_pin: ^ECB_D:PA8
shutdown_speed: 0
heater: extruder1
heater_temp: 50.0
#FAN1
[fan_generic Part-Cooling_Fan0]
pin: !ECB_D:PA15
tachometer_pin: ^ECB_D:PC10
shutdown_speed: 0
#FAN3
[fan_generic Part-Cooling_Fan1]
pin: !ECB_D:PA9
tachometer_pin: ^ECB_D:PA10
shutdown_speed: 0
# [multi_pin my_fan]
# pins: !H0:gpio10, !H0:gpio3, !H1:gpio10, !H1:gpio3
# [multi_pin my_fan_r]
# pins: H0:gpio9, H0:gpio4, H1:gpio9, H1:gpio4
# [fan]
# pin=multi_pin:my_fan
# tachometer_pin=multi_pin:my_fan_r
# off_below:0.3


########################################
# LED
########################################
[led ECB_Status_led]
blue_pin: ECB_D:PB14
cycle_time: 1.000
initial_BLUE: 0.5

[neopixel RGB0]
pin: ECB_D:PB5
[neopixel RGB1]
pin: ECB_D:PD2

########################################
# Filament_Sensor
########################################
[filament_switch_sensor Filament_Sensor0]
switch_pin: ECB_D:PC14
[filament_switch_sensor Filament_Sensor1]
switch_pin: ECB_D:PC8

#### #### #### ####
# Button
#### #### #### ####
[gcode_button load_button0]
pin: !ECB_D:PA0
press_gcode:
  #SET_PIN PIN=pa13_pin VALUE=1.0
  G91
  G1 E+5 F300
  G90
release_gcode:
  #SET_PIN PIN=pa13_pin VALUE=0.0
#### #### #### ####
# Button
#### #### #### ####
[gcode_button load_button1]
pin: !ECB_D:PC7
press_gcode:
    # 获取当前使用的挤出机编号
    # GET_EXTRUDER
    # # 将返回值保存在一个变量中
    # SET_GCODE_VARIABLE MACRO=GET_EXTRUDER VARIABLE=extruder_number VALUE={params.EXTRUDER}
    # # 根据不同的挤出机编号，执行不同的操作
    # {% if extruder_number == 0 %}
    #     # 如果当前使用的是第一个挤出机，切换到第二个挤出机
    #     ACTIVATE_EXTRUDER EXTRUDER=extruder1
    #     # 在控制台打印一条消息
    #     T1
    # {% elif extruder_number == 1 %}
    #     # 如果当前使用的是第二个挤出机，切换到第三个挤出机
    #     ACTIVATE_EXTRUDER EXTRUDER=extruder2
    #     # 在控制台打印一条消息
    #     T0
    # {% endif %}
  {% if printer.toolhead.extruder=="extruder" %}
	T1
  {% else %}
	T0
  {% endif %}
release_gcode:
  #SET_PIN PIN=pa13_pin VALUE=0.0

########################################
# output pin & input pin(button)
########################################
# [gcode_button my_gcode_button]
# pin: ^!PC6
# #   连接到按钮的引脚。必须提供此参数。
# #analog_range:
# #   两个逗号分隔的阻值(单位：欧姆)，指定了按钮的最小和最大电阻。
# #   如果提供了 analog_range ，必须使用一个模拟功能的引脚。默认情况下为按钮使用数字GPIO。
# #   analog_pullup_resistor: 当定义 analog_range 时的上拉电阻(欧姆)。默认为4700欧姆。
# press_gcode:
#   SET_LED LED="RGB" RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
# #   当按钮被按下时要执行的 G-Code 命令序列，支持G-Code模板。必须提供此参数。
# #release_gcode:
# #   当按钮被释放时要执行的G-Code命令序列，支持G-Code模板。默认在按钮释放时不运行任何命令。

# [output_pin light]
# pin: PD3
# pwm: true
# cycle_time: 0.01      # 0.01s, 10ms
# value: 1              # 在MCU配置期间最初设置引脚的值。默认为0（低电压）。
# shutdown_value: 0     # 在MCU关闭事件中设置引脚的值。默认为0（低电压）。

# [output_pin power_on]
# pin: PG8
# value: 1              # 在MCU配置期间最初设置引脚的值。默认为0（低电压）。
# shutdown_value: 0     # 在MCU关闭事件中设置引脚的值。默认为0（低电压）。

# [output_pin set_fan]
# pin=multi_pin:my_fan

